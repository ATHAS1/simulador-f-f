/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_liz;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Josué Galván
 */
public class main extends javax.swing.JFrame {
    JComboBox comboBox = new JComboBox();
    JTextArea textArea;
    int filas, i, j;
    //Variable section ALIMENTACION
    String tipoAlimentacion, unidadAlimentacion;
    int num_componentes_alimentacion;
    boolean flag_total_alimentacion = false;
    DefaultTableModel tablaComponentesAlimentacion = new DefaultTableModel();
    Object col_total_alimentacion[] = new Object[2], row_total_alimentacion[] = new Object[4];
    Object col_componente_alimentacion[] = new Object[3], row_componentes_alimentacion[] = new Object[2];
    //Variable section SOLVENTE
    String tipoSolvente;
    int num_componentes_solvente;
    boolean flag_total_solvente = false;
    DefaultTableModel tablaComponentesSolvente = new DefaultTableModel();
    Object col_total_solvente[] = new Object[2], row_total_solvente[] = new Object[4];
    Object col_componente_solvente[] = new Object[3], row_componentes_solvente[] = new Object[2];
    //Instancy and recovery of database values
    OperacionesBD operacionesBD = new OperacionesBD();
    Procesos proceso = new Procesos();
    String nombres_componentes [];
    //BD CRITICA
    double presion_critica [] = {731.1, 640.5, 839.1, 693.7, 396.9, 3206.7, 1091.9, 591.5, 471.7, 556.0};
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_valor_alimentacion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_valor_presion_alimentacion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_valor_temperatura_alimentacion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        combo_componentes_alimentacion = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_componentes_alimentacion = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_valor_solvente = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txt_valor_presion_solvente = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txt_valor_temperatura_solvente = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        combo_componentes_solvente = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_componentes_solvente = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txt_temperatura_operacion = new javax.swing.JTextField();
        txt_numero_etapas = new javax.swing.JTextField();
        txt_iteraciones = new javax.swing.JTextField();
        txt_presion_operacion = new javax.swing.JTextField();
        btn_resultados = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COLUMNA DE EXTRACCIÓN L-L");
        setBackground(new java.awt.Color(0, 0, 102));
        setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        setForeground(java.awt.Color.cyan);

        jPanel1.setBackground(new java.awt.Color(0, 102, 204));

        jTabbedPane5.setBackground(new java.awt.Color(0, 0, 102));
        jTabbedPane5.setForeground(new java.awt.Color(0, 0, 0));
        jTabbedPane5.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(102, 153, 255));
        jPanel2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("• Número de componentes");

        jLabel2.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Flujo");

        jLabel3.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Lbmol/hr");

        jLabel4.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("• Presión");

        jLabel5.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Temperatura");

        jLabel6.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Psia");

        jLabel7.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("°F");

        jLabel8.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("• Flujo de alimentación");

        combo_componentes_alimentacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        combo_componentes_alimentacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_componentes_alimentacionActionPerformed(evt);
            }
        });

        tabla_componentes_alimentacion.setBackground(new java.awt.Color(102, 204, 255));
        tabla_componentes_alimentacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_componentes_alimentacion);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_valor_alimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3))
                            .addComponent(jLabel8))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_valor_presion_alimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_valor_temperatura_alimentacion)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(220, 220, 220))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combo_componentes_alimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_valor_alimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_valor_presion_alimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txt_valor_temperatura_alimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo_componentes_alimentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("ALIMENTACIÓN", jPanel2);

        jPanel3.setBackground(new java.awt.Color(102, 153, 255));

        jLabel9.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("• Flujo de solvente");

        jLabel10.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Solvente");

        jLabel11.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Lbmol/hr");

        jLabel12.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("• Presión");

        jLabel13.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Psia");

        jLabel14.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Temperatura");

        jLabel15.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("°F");

        jLabel16.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("• Número de componentes");

        combo_componentes_solvente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        combo_componentes_solvente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_componentes_solventeActionPerformed(evt);
            }
        });

        tabla_componentes_solvente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabla_componentes_solvente);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_valor_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txt_valor_presion_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txt_valor_temperatura_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel15)))
                        .addGap(189, 189, 189))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(combo_componentes_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel12)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txt_valor_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txt_valor_presion_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txt_valor_temperatura_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(combo_componentes_solvente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane5.addTab("SOLVENTE", jPanel3);

        jPanel4.setBackground(new java.awt.Color(102, 153, 255));

        jLabel17.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("• Temperatura de operación:");

        jLabel18.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("• Número de etapas:");

        jLabel19.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("• Presión de operación:");

        jLabel20.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("• Iteraciones:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_iteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_presion_operacion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_numero_etapas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(txt_temperatura_operacion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(451, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txt_numero_etapas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txt_temperatura_operacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(txt_presion_operacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txt_iteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("COLUMNA", jPanel4);

        btn_resultados.setText("Obtener Resultados");
        btn_resultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_resultados)
                .addGap(339, 339, 339))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_resultados)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combo_componentes_alimentacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_componentes_alimentacionActionPerformed
        col_total_alimentacion[0] = "Componente";
        col_total_alimentacion[1] = "Fracción";
        tablaComponentesAlimentacion = new DefaultTableModel(col_total_alimentacion, 4);
        tabla_componentes_alimentacion.setModel(tablaComponentesAlimentacion);
        filas = tabla_componentes_alimentacion.getRowCount();
        for (i = 0; filas > i; i++)
            tablaComponentesAlimentacion.removeRow(0);
        
        filas = tabla_componentes_alimentacion.getRowCount();
        for (i = 0; filas > i; i++)
            tablaComponentesAlimentacion.removeRow(0);
        num_componentes_alimentacion = Integer.parseInt((String)combo_componentes_alimentacion.getSelectedItem());
        if (flag_total_alimentacion == true) {
            for (i = 0; i < num_componentes_alimentacion; i++)
                tablaComponentesAlimentacion.addRow(row_total_alimentacion);
        }
        else {
            for (i = 0; i < num_componentes_alimentacion; i++) 
                tablaComponentesAlimentacion.addRow(row_componentes_alimentacion);
        }
        tabla_componentes_alimentacion.setModel(tablaComponentesAlimentacion);
        crearTablaCombo(tabla_componentes_alimentacion, tablaComponentesAlimentacion);
    }//GEN-LAST:event_combo_componentes_alimentacionActionPerformed

    private void combo_componentes_solventeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_componentes_solventeActionPerformed
        col_total_solvente[0] = "Componente";
        col_total_solvente[1] = "Fracción";
        tablaComponentesSolvente = new DefaultTableModel(col_total_solvente, 4);
        tabla_componentes_solvente.setModel(tablaComponentesSolvente);
        filas = tabla_componentes_solvente.getRowCount();
        for (i = 0; filas > i; i++)
            tablaComponentesSolvente.removeRow(0);
        
        filas = tabla_componentes_solvente.getRowCount();
        for (i = 0; filas > i; i++)
            tablaComponentesSolvente.removeRow(0);
        num_componentes_solvente = Integer.parseInt((String)combo_componentes_solvente.getSelectedItem());
        if (flag_total_solvente == true) {
            for (i = 0; i < num_componentes_solvente; i++)
                tablaComponentesSolvente.addRow(row_total_solvente);
        }
        else{
            for (i = 0; i < num_componentes_solvente; i++) 
                tablaComponentesSolvente.addRow(row_componentes_solvente);
        }
        tabla_componentes_solvente.setModel(tablaComponentesSolvente);
        crearTablaCombo(tabla_componentes_solvente, tablaComponentesSolvente);
    }//GEN-LAST:event_combo_componentes_solventeActionPerformed

    private void btn_resultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resultadosActionPerformed
        //Definition of variables used to retrieve interface information
        int filas_alimentacion, columnas_alimentacion, filas_solvente, columnas_solvente, num_etapas, valor_alimentacion, valor_solvente, k = 0;
        double temperatura_operacion, valor_temperatura_alimentacion, valor_temperatura_solvente, valor_presion_alimentacion, valor_presion_solvente;
        String info_recuperada = "";
        //Obtaining the values of each cell from the tables in the interface plus feed and solvent values
        //Alimentacion
        filas_alimentacion = tabla_componentes_alimentacion.getRowCount();
        columnas_alimentacion = tabla_componentes_alimentacion.getColumnCount();
        valor_alimentacion = Integer.parseInt(txt_valor_alimentacion.getText());
        valor_temperatura_alimentacion = Double.parseDouble(txt_valor_temperatura_alimentacion.getText());
        valor_presion_alimentacion = Double.parseDouble(txt_valor_presion_alimentacion.getText());
        //Solvente
        filas_solvente = tabla_componentes_solvente.getRowCount();
        columnas_solvente = tabla_componentes_solvente.getColumnCount();
        valor_solvente = Integer.parseInt(txt_valor_solvente.getText());
        valor_temperatura_solvente = Double.parseDouble(txt_valor_temperatura_solvente.getText());
        valor_presion_solvente = Double.parseDouble(txt_valor_presion_solvente.getText());
        //Columna
        num_etapas = Integer.parseInt(txt_numero_etapas.getText());
        temperatura_operacion = Double.parseDouble(txt_temperatura_operacion.getText());
        
        //Creating the matrix with the information obtained from the ALIMENTACION table
        String info_alimentacion [][] = new String [filas_alimentacion][columnas_alimentacion];
        String info_solvente [][] = new String [filas_solvente][columnas_solvente];
        info_recuperada += "Componente\tFracción\n";
        for (j = 0; j < filas_alimentacion; j++) {
            for (i = 0; i < columnas_alimentacion; i++) {
                info_alimentacion [j][i] = (String) tabla_componentes_alimentacion.getValueAt(j, i);
                info_recuperada += info_alimentacion [j][i] + "\t";
            }
            info_recuperada += "\n";
        }
        
        //Creating the matrix with the information obtained from the SOLVENTE table
        for (j = 0; j < filas_solvente; j++) {
            for (i = 0; i < columnas_solvente; i++) {
                info_solvente [j][i] = (String) tabla_componentes_solvente.getValueAt(j, i);
                info_recuperada += info_solvente [j][i] + "\t";
            }
            info_recuperada += "\n";
        }
        
        //Recovering the chosen components
        String componentes_elegidos [] = new String [filas_alimentacion + filas_solvente];
        for (i = 0; i < (filas_alimentacion + filas_solvente); i++)
            if (i < filas_alimentacion)
                componentes_elegidos [i] = info_alimentacion [i][0];
            else {
                componentes_elegidos [i] = info_solvente [k][0];
                k++;
            }
        
        info_recuperada += "\nValor de flujo de alimentacion:\t" + valor_alimentacion + "\nValor de solvente:\t" + valor_solvente + "\n\n";
        
        //Show results
        info_recuperada += "Fxf [ ] =\t";
        double Fxf [] = new double [filas_alimentacion];
        Fxf = proceso.obtenerValores_Fxf(filas_alimentacion, columnas_alimentacion, info_alimentacion, valor_alimentacion);
        for (i = 0; i < filas_alimentacion; i++)
            info_recuperada += Fxf[i] + "\t";
        
        info_recuperada += "\nSxs [ ] =\t";
        double Sxs [] = new double [filas_solvente];
        Sxs = proceso.obtenerValores_Sxs(filas_solvente, columnas_solvente, info_solvente, valor_solvente);
        for (i = 0; i < filas_solvente; i++)
            info_recuperada += Sxs[i] + "\t";
        
        info_recuperada += "\nFxf0 [ ] =\t";
        double Fxf0 [] = new double [filas_alimentacion];
        Fxf0 = proceso.obtenerValores_Fxf0(Fxf, filas_alimentacion, num_etapas);
        for (i = 0; i < filas_alimentacion; i++)
            info_recuperada += Fxf0[i] + "\t";
        
        info_recuperada += "\nSxs0 [ ] =\t";
        double Sxs0 [] = new double [filas_solvente];
        Sxs0 = proceso.obtenerValores_Sxs0(Sxs, filas_solvente, num_etapas);
        for (i = 0; i < filas_solvente; i++)
            info_recuperada += Sxs0[i] + "\t";
        
        info_recuperada += "\n\nE_inter [ ] =\t";
        double E_inter [] = new double [num_etapas];
        E_inter = proceso.obtenerValores_Einter(Fxf0, num_etapas, valor_solvente);
        for (i = 0; i < num_etapas; i++)
            info_recuperada += E_inter[i] + "\t";
        
        info_recuperada += "\n\n**********\tXE_inter [ ][ ]\t**********\n";
        double XE_inter [][] = new double[num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        XE_inter = proceso.obtenerValores_XEinter(num_componentes_alimentacion, num_componentes_solvente, num_etapas, E_inter, Sxs0, valor_solvente);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += XE_inter[i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\nR_inter [ ] =\t";
        double R_inter [] = new double [num_etapas];
        R_inter = proceso.obtenerValores_Rinter(Fxf0, num_etapas, valor_alimentacion);
        for (i = 0; i < num_etapas; i++)
            info_recuperada += R_inter[i] + "\t";
        
        info_recuperada += "\n\n**********\tXR_inter [ ][ ]\t**********\n";
        double XR_inter [][] = new double[num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        XR_inter = proceso.obtenerValores_XRinter(num_componentes_alimentacion, num_componentes_solvente, num_etapas, R_inter, Fxf, valor_alimentacion, Fxf0);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += XR_inter[i][j] + "\t";
            }
            info_recuperada += "\n";
        }
            
        int id_componente [] = new int [filas_alimentacion + filas_solvente];
        double A [][] = new double[10][10];
        double B [][] = new double[10][10];
        double C [][] = new double[10][10];
        double Tao [][] = new double[num_componentes_alimentacion + num_componentes_solvente][num_componentes_alimentacion + num_componentes_solvente];
        double alfa [] = new double[id_componente.length];
        double G [][] = new double [id_componente.length][id_componente.length];
        try {
            id_componente = operacionesBD.obtenerIDComponentes(componentes_elegidos);
            A = operacionesBD.obtener_matriz_A();
            B = operacionesBD.obtener_matriz_B();
            C = operacionesBD.obtener_matriz_C();
            Tao = proceso.obtener_Tao(A, B, C, id_componente, temperatura_operacion);
            info_recuperada += "\n**********\tTao [ ][ ]\t**********\n";
            for (i = 0; i < id_componente.length; i++) {
                for (j = 0; j < id_componente.length; j++) {
                    info_recuperada += Tao [i][j]+ "\t";
                }
                info_recuperada += "\n";
            }
            info_recuperada += "\n**********\tG [ ][ ]\t**********\n";
            alfa = operacionesBD.alfa(componentes_elegidos);
            G = proceso.obtener_G(alfa, Tao, id_componente.length);
            for (i = 0; i < id_componente.length; i++) {
                for (j = 0; j < id_componente.length; j++) {
                    info_recuperada += G [i][j] + "\t";
                }
                info_recuperada += "\n";
            }
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        info_recuperada += "\n**********\tgammaR [ ][ ]\t**********\n";
        double gammaR [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        gammaR = proceso.obtener_GammaR(Tao, G, XR_inter, num_componentes_alimentacion + num_componentes_solvente, num_etapas);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += gammaR [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\n**********\tgammaE [ ][ ]\t**********\n";
        double gammaE [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        gammaE = proceso.obtener_GammaE(Tao, G, XE_inter, num_componentes_alimentacion + num_componentes_solvente, num_etapas);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += gammaE [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\n**********\tK_inter [ ][ ]\t**********\n";
        double Kinter [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        Kinter = proceso.obtener_Kinter(gammaE, gammaR, num_componentes_alimentacion + num_componentes_solvente, num_etapas);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += Kinter [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\nAj [ ] =\t";
        double Aj [] = new double [num_etapas];
        Aj = proceso.obtener_Aj(E_inter, valor_alimentacion, num_etapas);
        for (i = 0; i < num_etapas; i++) {
            info_recuperada += Aj [i] + "\t";
        }
        
        info_recuperada += "\n\n**********\tBj [ ][ ]\t**********\n";
        double Bj [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        Bj = proceso.obtener_Bj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Aj, Kinter, E_inter);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += Bj [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\n**********\tCj [ ][ ]\t**********\n";
        double Cj [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        Cj = proceso.obtener_Cj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, E_inter, Kinter);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += Cj [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\n**********\tDj [ ][ ]\t**********\n";
        double Dj [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        Dj = proceso.obtener_Dj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Fxf, Sxs);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += Dj [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\n**********\tPj [ ][ ]\t**********\n";
        double Pj [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        Pj = proceso.obtener_Pj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Aj, Bj, Cj);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += Pj [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        info_recuperada += "\n**********\tQj [ ][ ]\t**********\n";
        double Qj [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        Qj = proceso.obtener_Qj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Aj, Bj, Dj, Pj);
        for (i = 0; i < num_etapas; i++) {
            for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                info_recuperada += Qj [i][j] + "\t";
            }
            info_recuperada += "\n";
        }
        
        double XR_reales [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        XR_reales = proceso.obtener_XR_reales(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Qj, Pj, XR_inter);
  
        double normalizacion [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        double CR1 = proceso.obtener_CR1(XR_inter, XR_reales);
        //info_recuperada += "\nCRITERIO 1:\t" + CR1;
        
        double XR_reales_nueva [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        double equilibrio [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        double norm_equilibrio [][] = new double [num_etapas][num_componentes_alimentacion + num_componentes_solvente];
        double suma_flujo_iso [] = new double [num_etapas];
        double CR2;
        
        if (CR1 > (0.01 * num_etapas * (num_componentes_alimentacion + num_componentes_solvente))) {
            i = 0;
            j = 0;
            do {                
                do {                
                    XR_reales_nueva = XR_reales;
                    normalizacion = proceso.obtener_normalizacion(XR_reales_nueva, num_etapas, num_componentes_alimentacion + num_componentes_solvente);
                    gammaR = proceso.obtener_GammaR(Tao, G, XR_reales_nueva, num_componentes_alimentacion + num_componentes_solvente, num_etapas);
                    Kinter = proceso.obtener_Kinter(gammaE, gammaR, num_componentes_alimentacion + num_componentes_solvente, num_etapas);
                    equilibrio = proceso.obtener_equilibrio(Kinter, normalizacion);
                    norm_equilibrio = proceso.obtener_normalizacion(equilibrio, num_etapas, num_componentes_alimentacion + num_componentes_solvente);
                    gammaE = proceso.obtener_GammaE(Tao, G, norm_equilibrio,  num_componentes_alimentacion + num_componentes_solvente, num_etapas);
                    Kinter = proceso.obtener_Kinter(gammaE, gammaR, num_componentes_alimentacion + num_componentes_solvente, num_etapas);
                    Bj = proceso.obtener_Bj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Aj, Kinter, E_inter);
                    Cj = proceso.obtener_Cj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, E_inter, Kinter);
                    XR_reales = proceso.obtener_XR_reales(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Qj, Pj, XR_reales_nueva);
                    CR1 = proceso.obtener_CR1(XR_reales, normalizacion);
                    i++;
                } while (i < 1000);
                i = 0;

                equilibrio = proceso.obtener_equilibrio(Kinter, XR_reales);
                suma_flujo_iso = proceso.suma_de_flujos(equilibrio, E_inter);
                CR2 = proceso.obtener_CR2(E_inter, suma_flujo_iso);
                if (CR2 > (0.01 * num_etapas)) {
                    Aj = proceso.obtener_Aj(suma_flujo_iso, valor_alimentacion, num_etapas);
                    Bj = proceso.obtener_Bj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Aj, Kinter, suma_flujo_iso);
                    Cj = proceso.obtener_Cj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, suma_flujo_iso, Kinter);
                    Pj = proceso.obtener_Pj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Aj, Bj, Cj);
                    Qj = proceso.obtener_Qj(num_etapas, num_componentes_alimentacion + num_componentes_solvente, Aj, Bj, Dj, Pj);
                    E_inter = suma_flujo_iso;
                }
                j ++;
            } while (j < 1000);
            
            info_recuperada += "\n**********\tXR_reales_norm [ ][ ]\t**********\n";
            for (i = 0; i < num_etapas; i++) {
                for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                    info_recuperada += normalizacion [i][j] + "\t";
                }
                info_recuperada += "\n";
            }
            
            info_recuperada += "\n**********\tXE_norm [ ][ ]\t**********\n";
            for (i = 0; i < num_etapas; i++) {
                for (j = 0; j < (num_componentes_alimentacion + num_componentes_solvente); j++) {
                    info_recuperada += norm_equilibrio [i][j] + "\t";
                }
                info_recuperada += "\n";
            }
            
            info_recuperada += "\nSUMA DE FLUJO =\t";
            for (i = 0; i < suma_flujo_iso.length; i++) {
                info_recuperada += suma_flujo_iso [i] + "\t";
            }
            
            info_recuperada += "\n\nRJ [ ] =\t";
            double Rj [] = new double [num_etapas];
            Rj = proceso.obtener_Rj(num_etapas, suma_flujo_iso, valor_alimentacion, valor_solvente);
            for (i = 0; i < Rj.length; i++) {
               info_recuperada += Rj [i] + "\t";
            }
            
            info_recuperada += "\n\nCALOR [ ] =\t";
            double calor [] = new double [num_etapas];
            calor = proceso.obtener_calor(num_etapas);
            for (i = 0; i < calor.length; i++) {
               info_recuperada += calor [i] + "\t";
            }
            
            try {
                info_recuperada += "\n\nBarry_Allen_alimentacion [ ] =\t";
                double barryAllen_alimentacion [] = new double [filas_alimentacion];
                barryAllen_alimentacion = operacionesBD.barryAllen_alimentacion(num_etapas, id_componente, filas_alimentacion, valor_temperatura_alimentacion, presion_critica);
                for (i = 0; i < barryAllen_alimentacion.length; i++) {
                    info_recuperada += barryAllen_alimentacion [i] + "\t";
                }
                
                info_recuperada += "\n\nBarry_Allen_solvente [ ] =\t";
                double barryAllen_solvente [] = new double [filas_solvente];
                barryAllen_solvente = operacionesBD.barryAllen_solvente(num_etapas, id_componente, filas_solvente, valor_temperatura_solvente, presion_critica);
                for (i = 0; i < barryAllen_solvente.length; i++) {
                    info_recuperada += barryAllen_solvente [i] + "\t";
                }
                
                info_recuperada += "\n\nKequilibrio_alimentacion [ ] =\t";
                double Kequilibrio_alimentacion [] = new double [filas_alimentacion];
                Kequilibrio_alimentacion = proceso.obtener_Kequilibrio_alimentacion(filas_alimentacion, barryAllen_alimentacion, valor_presion_alimentacion);
                for (i = 0; i < Kequilibrio_alimentacion.length; i++) {
                    info_recuperada += Kequilibrio_alimentacion [i] + "\t";
                }

                info_recuperada += "\n\nKequilibrio_solvente [ ] =\t";
                double Kequilibrio_solvente [] = new double [filas_solvente];
                Kequilibrio_solvente = proceso.obtener_Kequilibrio_solvente(filas_solvente, barryAllen_solvente, valor_presion_alimentacion);
                for (i = 0; i < Kequilibrio_solvente.length; i++) {
                    info_recuperada += Kequilibrio_solvente [i] + "\t";
                }
           
                info_recuperada += "\n\nFRACCION DE VAPOR (ALIMENTACION)=\t" + proceso.obtener_fraccionVapor_alimentacion(filas_alimentacion, Kequilibrio_alimentacion, info_alimentacion);
                info_recuperada += "\n\nFRACCION DE VAPOR (SOLVENTE)=\t" + proceso.obtener_fraccionVapor_solvente(filas_solvente, Kequilibrio_solvente, info_solvente);
                
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        textArea = new JTextArea(info_recuperada);
        textArea.setColumns(105);
        textArea.setRows(30);
        textArea.setWrapStyleWord(true);
        textArea.setSize(textArea.getPreferredSize().width, 1);
        JOptionPane.showMessageDialog(rootPane, new JScrollPane(textArea), "Resultados", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btn_resultadosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }
    
    private void crearTablaCombo(JTable table_componente, DefaultTableModel tablaComponente){
        try {
            //Combo and values
            nombres_componentes = operacionesBD.obtenerComponentes();
            for (i = 0; i < 10; i++)
                comboBox.addItem(nombres_componentes[i]);
            //Add model to JTable
            table_componente.setModel(tablaComponente);
            table_componente.setRowHeight(22);//row height
            //Which column have a JComboBox
            table_componente.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboBox));
            table_componente.setDefaultRenderer(Object.class, new Celda_renderer(0));
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_resultados;
    private javax.swing.JComboBox<String> combo_componentes_alimentacion;
    private javax.swing.JComboBox<String> combo_componentes_solvente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTable tabla_componentes_alimentacion;
    private javax.swing.JTable tabla_componentes_solvente;
    private javax.swing.JTextField txt_iteraciones;
    private javax.swing.JTextField txt_numero_etapas;
    private javax.swing.JTextField txt_presion_operacion;
    private javax.swing.JTextField txt_temperatura_operacion;
    private javax.swing.JTextField txt_valor_alimentacion;
    private javax.swing.JTextField txt_valor_presion_alimentacion;
    private javax.swing.JTextField txt_valor_presion_solvente;
    private javax.swing.JTextField txt_valor_solvente;
    private javax.swing.JTextField txt_valor_temperatura_alimentacion;
    private javax.swing.JTextField txt_valor_temperatura_solvente;
    // End of variables declaration//GEN-END:variables
}
